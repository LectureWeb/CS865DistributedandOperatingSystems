<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://www.cmcrossroads.com/bradapp/docs/sdd.html -->
<HTML><HEAD><TITLE>A Software Design Specification Template</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<H2>A Software Design Specification Template</H2>
<P>
<P>by <B>Brad Appleton</B> <I>&lt;<A 
href="mailto:brad@bradapp.net">brad@bradapp.net</A>&gt;</I><BR><I><A 
href="http://www.bradapp.net/">http://www.bradapp.net/</A></I><BR>
<P><SMALL>Copyright © 1994-1997 by Bradford D. Appleton 
<P>Permission is hereby granted to make and distribute verbatim copies of this 
document<BR>provided the copyright notice and this permission notice are 
preserved on all copies.<BR></SMALL></CENTER>
<P>
<HR>

<P>
<H2><A name=TOC>Table of Contents</A></H2>
<UL>
  <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC1" 
  name=TOC_SEC1>Introduction</A> 
  <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC2" 
  name=TOC_SEC2>Document Outline</A> 
  <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC3" 
  name=TOC_SEC3>Document Description</A> 
  <UL>
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC4" 
    name=TOC_SEC4>Introduction</A> 
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC5" 
    name=TOC_SEC5>System Overview</A> 
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC6" 
    name=TOC_SEC6>Design Considerations</A> 
    <UL>
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC7" 
      name=TOC_SEC7>Assumptions and Dependencies</A> 
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC8" 
      name=TOC_SEC8>General Constraints</A> 
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC9" 
      name=TOC_SEC9>Goals and Guidelines</A> 
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC10" 
      name=TOC_SEC10>Development Methods</A> </LI></UL>
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC11" 
    name=TOC_SEC11>Architectural Strategies</A> 
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC12" 
    name=TOC_SEC12>System Architecture</A> 
    <UL>
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC13" 
      name=TOC_SEC13>Subsystem Architecture</A> </LI></UL>
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC14" 
    name=TOC_SEC14>Policies and Tactics</A> 
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC15" 
    name=TOC_SEC15>Detailed System Design</A> 
    <UL>
      <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC16" 
      name=TOC_SEC16>Detailed Subsystem Design</A> </LI></UL>
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC17" 
    name=TOC_SEC17>Glossary</A> 
    <LI><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#SEC18" 
    name=TOC_SEC18>Bibliography</A> </LI></UL></LI></UL>
<HR>

<P>
<H2><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC1" 
name=SEC1>Introduction</A></H2>
<P>The following is an attempt to put together a complete, yet reasonably 
flexible template for the specification of software designs. Wherever possible, 
I have tried to provide guidelines (instead of prescribing requirements) for the 
contents of various sections and subsections of the document. Some may prefer to 
require more detailed subsections of a particular section, choosing one or more 
of the subsection topics from the list of guidelines provided. In this sense, 
this document is really a template for a template. 
<P>In devising this template, I have gleaned information from many sources, 
including various texts on Software Engineering (Pressman, Sommerville, and Van 
Vliet), Object-Oriented Development (Booch, Rumbaugh, Berard, and Wirfs-Brock), 
various SEI reports, DoD-Std and Mil-Std documentation requirements 
(2167/2167A), and IEEE documentation standards (particularly IEEE-1016 for 
software designs, and IEEE-830 for software requirements). I have made every 
effort <EM>not</EM> to assume or impose a particular software development 
methodology or paradigm, and to place more emphasis on content than on format. 
<P>It is my desire that a completed software design specification meet the 
following criteria: 
<P>
<UL>
  <LI>It should be able to adequately serve as training material for new project 
  members, imparting to them enough information and understanding about the 
  project implementation, so that they are able to understand what is being said 
  in design meetings, and won't feel as if they are drowning when they are first 
  asked to create or modify source code. 
  <P></P>
  <LI>It should serve as "objective evidence" that the designers and/or 
  implementors are following through on their commitment to implement the 
  functionality described in the requirements specification. 
  <P></P>
  <LI>It needs to be as detailed as possible, while at the same time not 
  imposing too much of a burden on the designers and/or implementors that it 
  becomes overly difficult to create or maintain. 
  <P></P></LI></UL>
<P>Please note that there are no sections in this document for describing 
administrative or business duties, or for proposing plans or schedules for 
testing or development. The sections in this document are concerned solely with 
the design of the software. While there are places in this document where it is 
appropriate to discuss the effects of such plans on the software design, it is 
this author's opinion that most of the details concerning such plans belong in 
one or more separate documents. 
<P>
<HR>

<P>
<H2><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC2" 
name=SEC2>Document Outline</A></H2>
<P>Here is the outline of the proposed template for software design 
specifications. Please note that many parts of the document may be extracted 
automatically from other sources and/or may be contained in other, smaller 
documents. What follows is just one suggested outline format to use when 
attempting to present the architecture and design of the entire system as one 
single document. This by no means implies that it literally is a single document 
(that would not be my personal preference): 
<P>
<UL>
  <LI>Introduction 
  <LI>System Overview 
  <LI>Design Considerations 
  <UL>
    <LI>Assumptions and Dependencies 
    <LI>General Constraints 
    <LI>Goals and Guidelines 
    <LI>Development Methods </LI></UL>
  <LI>Architectural Strategies 
  <UL>
    <LI><VAR>strategy-1 name or description</VAR> 
    <LI><VAR>strategy-2 name or description</VAR> 
    <LI>... </LI></UL>
  <LI>System Architecture 
  <UL>
    <LI><VAR>component-1 name or description</VAR> 
    <LI><VAR>component-2 name or description</VAR> 
    <LI>... </LI></UL>
  <LI>Policies and Tactics 
  <UL>
    <LI><VAR>policy/tactic-1 name or description</VAR> 
    <LI><VAR>policy/tactic-2 name or description</VAR> 
    <LI>... </LI></UL>
  <LI>Detailed System Design 
  <UL>
    <LI><VAR>module-1 name or description</VAR> 
    <LI><VAR>module-2 name or description</VAR> 
    <LI>... </LI></UL>
  <LI>Glossary 
  <LI>Bibliography </LI></UL>
<P>The above outline is by no means exclusive. A particular numbering scheme is 
not necessarily required and you are <EM>more</EM> than welcome to add your own 
sections or subsections where you feel they are appropriate. In particular you 
may wish to move the bibliography and glossary to the beginning of the document 
instead of placing them at the end. 
<P>The same template is intended to be used for both high-level design and 
low-level design. The design document used for high-level design is a "living 
document" in that it gradually evolves to include low-level design details 
(although perhaps the "Detailed Design" section may not yet be appropriate at 
the high-level design phase). 
<P>The ordering of the sections in this document attempts to correspond to the 
order in which issues are addressed and in which decisions are made during the 
actual design process. Of course it is understood that software designs 
frequently (and often fortunately) don't always proceed in this order (or in any 
linear, or even predictable order). However, it is useful for the purpose of 
comprehending the design of the system to present them as if they did. 
Frequently, one of the best ways to document a project's design is to keep a 
detailed project journal, log, or diary of issues as they are mulled over and 
bandied about and to record the decisions made (and the reasons why) in the 
journal. Unfortunately, the journal format is not usually organized the way most 
people would like it for a formal review. In such cases, for the purpose of 
review, the journal can be condensed and/or portions of it extracted and 
reorganized according to this outline. However, if this is done then you need to 
choose whether to update and maintain the design document in the journal format, 
or the formal review format. It is not advisable to try and maintain the design 
document in both formats. (If you have an automated method of converting the 
journal into a formal document, then this problem is solved.) 
<P>
<HR>

<P>
<H2><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC3" 
name=SEC3>Document Description</A></H2>
<P>Here is the description of the contents (by section and subsection) of the 
proposed template for software design specifications: 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC4" 
name=SEC4>Introduction</A></H3>
<P>Provide an overview of the entire document: 
<P>
<UL>
  <LI>Describe the purpose of this document 
  <LI>Describe the scope of this document 
  <LI>Describe this document's intended audience 
  <LI>Identify the system/product using any applicable names and/or version 
  numbers. 
  <LI>Provide references for any other pertinent documents such as: 
  <UL>
    <LI>Related and/or companion documents 
    <LI>Prerequisite documents 
    <LI>Documents which provide background and/or context for this document 
    <LI>Documents that result from this document (e.g. a test plan or a 
    development plan) </LI></UL>
  <LI>Define any important terms, acronyms, or abbreviations 
  <LI>Summarize (or give an abstract for) the contents of this document. 
</LI></UL>
<P>
<DL compact>
  <DT><STRONG>Note:</STRONG> 
  <DD>For the remaining sections of this document, it is conceivable (and 
  perhaps even desirable) that one or more of the section topics are discussed 
  in a separate design document within the project. For each section where such 
  a document exists, a reference to the appropriate design document is all that 
  is necessary. All such external (or fragmented) design documents should 
  probably be provided with this document at any design reviews. </DD></DL>
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC5" 
name=SEC5>System Overview</A></H3>
<P>Provide a general description of the software system including its 
functionality and matters related to the overall system and its design (perhaps 
including a discussion of the basic design approach or organization). Feel free 
to split this discussion up into subsections (and subsubsections, etc ...). 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC6" 
name=SEC6>Design Considerations</A></H3>
<P>This section describes many of the issues which need to be addressed or 
resolved before attempting to devise a complete design solution. 
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC7" 
name=SEC7>Assumptions and Dependencies</A></H4>
<P>Describe any assumptions or dependencies regarding the software and its use. 
These may concern such issues as: 
<P>
<UL>
  <LI>Related software or hardware 
  <LI>Operating systems 
  <LI>End-user characteristics 
  <LI>Possible and/or probable changes in functionality </LI></UL>
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC8" 
name=SEC8>General Constraints</A></H4>
<P>Describe any global limitations or constraints that have a significant impact 
on the design of the system's software (and describe the associated impact). 
Such constraints may be imposed by any of the following (the list is 
<EM>not</EM> exhaustive): 
<P>
<UL>
  <LI>Hardware or software environment 
  <LI>End-user environment 
  <LI>Availability or volatility of resources 
  <LI>Standards compliance 
  <LI>Interoperability requirements 
  <LI>Interface/protocol requirements 
  <LI>Data repository and distribution requirements 
  <LI>Security requirements (or other such regulations) 
  <LI>Memory and other capacity limitations 
  <LI>Performance requirements 
  <LI>Network communications 
  <LI>Verification and validation requirements (testing) 
  <LI>Other means of addressing quality goals 
  <LI>Other requirements described in the requirements specification </LI></UL>
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC9" 
name=SEC9>Goals and Guidelines</A></H4>
<P>Describe any goals, guidelines, principles, or priorities which dominate or 
embody the design of the system's software. Such goals might be: 
<P>
<UL>
  <LI>The KISS principle ("Keep it simple stupid!") 
  <LI>Emphasis on speed versus memory use 
  <LI>working, looking, or "feeling" like an existing product </LI></UL>
<P>For each such goal or guideline, unless it is implicitly obvious, describe 
the reason for its desirability. Feel free to state and describe each goal in 
its own subsubsection if you wish. 
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC10" 
name=SEC10>Development Methods</A></H4>
<P>Briefly describe the method or approach used for this software design. If one 
or more formal/published methods were adopted or adapted, then include a 
reference to a more detailed description of these methods. If several methods 
were seriously considered, then each such method should be mentioned, along with 
a brief explanation of why all or part of it was used or not used. 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC11" 
name=SEC11>Architectural Strategies</A></H3>
<P>Describe any design decisions and/or strategies that affect the overall 
organization of the system and its higher-level structures. These strategies 
should provide insight into the key abstractions and mechanisms used in the 
system architecture. Describe the reasoning employed for each decision and/or 
strategy (possibly referring to previously stated design goals and principles) 
and how any design goals or priorities were balanced or traded-off. Such 
decisions might concern (but are not limited to) things like the following: 
<P>
<UL>
  <LI>Use of a particular type of product (programming language, database, 
  library, etc. ...) 
  <LI>Reuse of existing software components to implement various parts/features 
  of the system 
  <LI>Future plans for extending or enhancing the software 
  <LI>User interface paradigms (or system input and output models) 
  <LI>Hardware and/or software interface paradigms 
  <LI>Error detection and recovery 
  <LI>Memory management policies 
  <LI>External databases and/or data storage management and persistence 
  <LI>Distributed data or control over a network 
  <LI>Generalized approaches to control 
  <LI>Concurrency and synchronization 
  <LI>Communication mechanisms 
  <LI>Management of other resources </LI></UL>
<P>Each significant strategy employed should probably be discussed in its own 
subsection, or (if it is complex enough) in a separate design document (with an 
appropriate reference here of course). Make sure that when describing a design 
decision that you also discuss any other significant alternatives that were 
considered, and your reasons for rejecting them (as well as your reasons for 
accepting the alternative you finally chose). Sometimes it may be most effective 
to employ the "pattern format" for describing a strategy. 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC12" 
name=SEC12>System Architecture</A></H3>
<P>This section should provide a high-level overview of how the functionality 
and responsibilities of the system were partitioned and then assigned to 
subsystems or components. Don't go into too much detail about the individual 
components themselves (there is a subsequent section for detailed component 
descriptions). The main purpose here is to gain a general understanding of how 
and why the system was decomposed, and how the individual parts work together to 
provide the desired functionality. 
<P>At the top-most level, describe the major responsibilities that the software 
must undertake and the various roles that the system (or portions of the system) 
must play. Describe how the system was broken down into its 
components/subsystems (identifying each top-level component/subsystem and the 
roles/responsibilities assigned to it). Describe how the higher-level components 
collaborate with each other in order to achieve the required results. Don't 
forget to provide some sort of rationale for choosing this particular 
decomposition of the system (perhaps discussing other proposed decompositions 
and why they were rejected). Feel free to make use of design patterns, either in 
describing parts of the architecture (in pattern format), or for referring to 
elements of the architecture that employ them. 
<P>If there are any diagrams, models, flowcharts, documented scenarios or 
use-cases of the system behavior and/or structure, they may be included here 
(unless you feel they are complex enough to merit being placed in the 
<CITE>Detailed System Design</CITE> section). Diagrams that describe a 
particular component or subsystem should be included within the particular 
subsection that describes that component or subsystem. 
<P>
<DL compact>
  <DT><STRONG>Note:</STRONG> 
  <DD>This section (and its subsections) really applies only to newly developed 
  (or yet-to-be developed) portions of the system. If there are parts of the 
  system that already existed before this development effort began, then you 
  only need to describe the pre-existing parts that the new parts of the system 
  depend upon, and only in enough detail sufficient to describe the 
  relationships and interactions between the old parts and the new parts. 
  Pre-existing parts that are modified or enhanced need to be described only to 
  the extent that is necessary for the reader to gain a sufficient understanding 
  of the nature of the changes that were made. </DD></DL>
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC13" 
name=SEC13>Subsystem Architecture</A></H4>
<P>If a particular component is one which merits a more detailed discussion than 
what was presented in the <CITE>System Architecture</CITE> section, provide that 
more detailed discussion in a subsection of the <CITE>System Architecture</CITE> 
section (or it may even be more appropriate to describe the component in its own 
design document). If necessary, describe how the component was further divided 
into subcomponents, and the relationships and interactions between the 
subcomponents (similar to what was done for top-level components in the 
<CITE>System Architecture</CITE> section). 
<P>If any subcomponents are also deemed to merit further discussion, then 
describe them in a separate subsection of this section (and in a similar 
fashion). Proceed to go into as many levels/subsections of discussion as needed 
in order for the reader to gain a high-level understanding of the entire system 
or subsystem (but remember to leave the gory details for the <CITE>Detailed 
System Design</CITE> section). 
<P>If this component is very large and/or complex, you may want to consider 
documenting its design in a separate document and simply including a reference 
to it in this section. If this is the option you choose, the design document for 
this component should have an organizational format that is very similar (if not 
identical to) this document. 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC14" 
name=SEC14>Policies and Tactics</A></H3>
<P>Describe any design policies and/or tactics that do not have sweeping 
architectural implications (meaning they would <EM>not</EM> significantly affect 
the overall organization of the system and its high-level structures), but which 
nonetheless affect the details of the interface and/or implementation of various 
aspects of the system. Such decisions might concern (but are not limited to) 
things like the following: 
<P>
<UL>
  <LI>Choice of which specific product to use (compiler, interpreter, database, 
  library, etc. ...) 
  <LI>Engineering trade-offs 
  <LI>Coding guidelines and conventions 
  <LI>The protocol of one or more subsystems, modules, or subroutines 
  <LI>The choice of a particular algorithm or programming idiom (or design 
  pattern) to implement portions of the system's functionality 
  <LI>Plans for ensuring requirements traceability 
  <LI>Plans for testing the software 
  <LI>Plans for maintaining the software 
  <LI>Interfaces for end-users, software, hardware, and communications 
  <LI>Hierarchical organization of the source code into its physical components 
  (files and directories). 
  <LI>How to build and/or generate the system's deliverables (how to compile, 
  link, load, etc. ...) </LI></UL>
<P>Each particular policy or set of tactics employed should probably be 
discussed in its own subsection, or (if it is large or complex enough) in a 
separate design document (with an appropriate reference here of course). Make 
sure that when describing a design decision that you also discuss any other 
significant alternatives that were considered, and your reasons for rejecting 
them (as well as your reasons for accepting the alternative you finally chose). 
For this reason, it may frequently be convenient to use one of the more popular 
"pattern formats" to describe a given tactic. 
<P>For this particular section, it may become difficult to decide whether a 
particular policy or set of tactics should be discussed in this section, or in 
the <CITE>System Architecture</CITE> section, or in the <CITE>Detailed System 
Design</CITE> section for the appropriate component. You will have to use your 
own "best" judgement to decide this. There will usually be some global policies 
and tactics that should be discussed here, but decisions about interfaces, 
algorithms, and/or data structures might be more appropriately discussed in the 
same (sub)section as its corresponding software component in one of these other 
sections. 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC15" 
name=SEC15>Detailed System Design</A></H3>
<P>Most components described in the <CITE>System Architecture</CITE> section 
will require a more detailed discussion. Other lower-level components and 
subcomponents may need to be described as well. Each subsection of this section 
will refer to or contain a detailed description of a system software component. 
The discussion provided should cover the following software component 
attributes: 
<P>
<DL compact>
  <DT><EM>Classification</EM> 
  <DD>The kind of component, such as a subsystem, module, class, package, 
  function, file, etc. .... 
  <P></P>
  <DT><EM>Definition</EM> 
  <DD>The specific purpose and semantic meaning of the component. This may need 
  to refer back to the requirements specification. 
  <P></P>
  <DT><EM>Responsibilities</EM> 
  <DD>The primary responsibilities and/or behavior of this component. What does 
  this component accomplish? What roles does it play? What kinds of services 
  does it provide to its clients? For some components, this may need to refer 
  back to the requirements specification. 
  <P></P>
  <DT><EM>Constraints</EM> 
  <DD>Any relevant assumptions, limitations, or constraints for this component. 
  This should include constraints on timing, storage, or component state, and 
  might include rules for interacting with this component (encompassing 
  preconditions, postconditions, invariants, other constraints on input or 
  output values and local or global values, data formats and data access, 
  synchronization, exceptions, etc.) 
  <P></P>
  <DT><EM>Composition</EM> 
  <DD>A description of the use and meaning of the subcomponents that are a part 
  of this component. 
  <P></P>
  <DT><EM>Uses/Interactions</EM> 
  <DD>A description of this components collaborations with other components. 
  What other components is this entity used by? What other components does this 
  entity use (this would include any side-effects this entity might have on 
  other parts of the system)? This concerns the method of interaction as well as 
  the interaction itself. Object-oriented designs should include a description 
  of any known or anticipated subclasses, superclasses, and metaclasses. 
  <P></P>
  <DT><EM>Resources</EM> 
  <DD>A description of any and all resources that are managed, affected, or 
  needed by this entity. Resources are entities external to the design such as 
  memory, processors, printers, databases, or a software library. This should 
  include a discussion of any possible race conditions and/or deadlock 
  situations, and how they might be resolved. 
  <P></P>
  <DT><EM>Processing</EM> 
  <DD>A description of precisely how this components goes about performing the 
  duties necessary to fulfill its responsibilities. This should encompass a 
  description of any algorithms used; changes of state; relevant time or space 
  complexity; concurrency; methods of creation, initialization, and cleanup; and 
  handling of exceptional conditions. 
  <P></P>
  <DT><EM>Interface/Exports</EM> 
  <DD>The set of services (resources, data, types, constants, subroutines, and 
  exceptions) that are provided by this component. The precise definition or 
  declaration of each such element should be present, along with comments or 
  annotations describing the meanings of values, parameters, etc. .... For each 
  service element described, include (or provide a reference) in its discussion 
  a description of its important software component attributes (Classification, 
  Definition, Responsibilities, Constraints, Composition, Uses, Resources, 
  Processing, and Interface). 
  <P></P></DD></DL>
<P>Much of the information that appears in this section is not necessarily 
expected to be kept separate from the source code. In fact, much of the 
information can be gleaned from the source itself (especially if it is 
adequately commented). This section should not copy or reproduce information 
that can be <EM>easily</EM> obtained from reading the source code (this would be 
an unwanted and unnecessary duplication of effort and would be very difficult to 
keep up-to-date). It is recommended that most of this information be contained 
in the source (with appropriate comments for each component, subsystem, module, 
and subroutine). Hence, it is expected that this section will largely consist of 
references to or excerpts of annotated diagrams and source code. Any referenced 
diagrams or source code excerpts should be provided at any design reviews. 
<P>
<H4><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC16" 
name=SEC16>Detailed Subsystem Design</A></H4>
<P>Provide a detailed description of this software component (or a reference to 
such a description). Complex diagrams showing the details of component 
structure, behavior, or information/control flow may be included in the 
subsection devoted to that particular component (although, unless they are very 
large or complex, some of these diagrams might be more appropriately included in 
the <CITE>System Architecture</CITE> section. The description should cover any 
applicable software component attributes (some of which may be adequately 
described solely by a source code declaration or excerpt). 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC17" 
name=SEC17>Glossary</A></H3>
<P>An ordered list of defined terms and concepts used throughout the document. 
<P>
<HR>

<P>
<H3><A href="http://www.cmcrossroads.com/bradapp/docs/sdd.html#TOC_SEC18" 
name=SEC18>Bibliography</A></H3>
<P>A list of referenced and/or related publications. 
<P>
<HR>

<P>
<ADDRESS>
<UL><B>Brad Appleton</B> <I>&lt;<A 
  href="mailto:brad@bradapp.net">brad@bradapp.net</A>&gt;</I><BR><I><A 
  href="http://www.bradapp.net/">http://www.bradapp.net/</A></I><BR></UL></ADDRESS></BODY></HTML>
