<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE>Chapter 2</TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
	<META NAME="CREATED" CONTENT="20070120;19094693">
	<META NAME="CHANGED" CONTENT="20070120;19482000">
	<META NAME="ProgId" CONTENT="Word.Document">
	<META NAME="Originator" CONTENT="Microsoft Word 9">
	<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
	<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Francis Marchese</o:Author>
  <o:LastAuthor>Francis Marchese</o:LastAuthor>
  <o:Revision>11</o:Revision>
  <o:TotalTime>729</o:TotalTime>
  <o:Created>2006-12-30T00:00:00Z</o:Created>
  <o:LastSaved>2007-01-20T22:25:00Z</o:LastSaved>
  <o:Pages>18</o:Pages>
  <o:Words>6422</o:Words>
  <o:Characters>36609</o:Characters>
  <o:Company>Pace University</o:Company>
  <o:Lines>305</o:Lines>
  <o:Paragraphs>73</o:Paragraphs>
  <o:CharactersWithSpaces>44958</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
	<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>BestFit</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>2</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
 </w:WordDocument>
</xml><![endif]-->
	<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1046">
  <o:colormru v:ext="edit" colors="#eaeaea,#f8f8f8"/>
  <o:colormenu v:ext="edit" fillcolor="#f8f8f8"/>
 </o:shapedefaults></xml><![endif]-->
	<!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</HEAD>
<BODY LANG="en-US" TEXT="#000000" LINK="#0000ff" VLINK="#800080" BGCOLOR="#f8f8f8" DIR="LTR">
<TABLE WIDTH=1247 BORDER=0 CELLPADDING=0 CELLSPACING=0 BGCOLOR="#ffffcc">
	<TR>
		<TD WIDTH=1247 VALIGN=TOP>
			<H1><FONT FACE="Arial"><B>CS865 &ndash; Distributed Software
			Development</B></FONT></H1>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=1247 VALIGN=TOP BGCOLOR="#ffff99">
			<P><FONT FACE="Arial"><FONT SIZE=4><B>Lecture 2</B></FONT></FONT></TD>
	</TR>
</TABLE>
<H3><FONT FACE="Arial"><FONT SIZE=4>Tannenbaum and Van Steen &ndash;
Chapter 2 </FONT></FONT>
</H3>
<H3><FONT COLOR="#ff0000"><FONT FACE="Comic Sans MS"><FONT SIZE=6>Architectures</FONT></FONT></FONT></H3>
<P>&nbsp;&nbsp;<FONT FACE="Arial"><FONT SIZE=4>Architectural Styles</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Software architecture - logical
organization of distributed systems into software components </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">Architectural
style</FONT>: </FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Types of components</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The way that components are
	connected </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The data exchanged between
	components</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">How these elements are
	jointly configured into a system. </FONT></FONT>
	</P>
</UL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">Software
component</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">- a
modular unit with well-defined, required and provided interfaces that
is <B><I><FONT COLOR="#ff0000">replaceable</FONT></I></B> within its
environment (<A HREF="http://www.omg.org/">OMG</A>, <A HREF="http://www.omg.org/docs/formal/05-07-04.pdf">spec</A>).
</FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">Connector </FONT>-
a mechanism that mediates communication, coordination, or cooperation
among components (</FONT></FONT><A HREF="../../Papers/p178-mehta.pdf"><FONT SIZE=4><FONT FACE="Arial">Mehta
et al., 2000</FONT></FONT></A><FONT SIZE=4><FONT FACE="Arial">; and
</FONT></FONT><A HREF="../../Papers/Boxology.pdf"><FONT SIZE=4><FONT FACE="Arial">Shaw
and Clements, 1997</FONT></FONT></A><FONT SIZE=4><FONT FACE="Arial">
</FONT></FONT><A HREF="../../Papers/Boxology.Tbl.pdf"><FONT SIZE=4><FONT FACE="Arial">table</FONT></FONT></A><FONT SIZE=4><FONT FACE="Arial">).
</FONT></FONT>
</P>
<P><FONT FACE="Arial"><FONT SIZE=4>e.g. a connector can be formed by
the facilities for (remote) procedure calls, message passing, or
streaming data.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Architectural styles for
distributed systems are:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">1. Layered
architectures</FONT></FONT></FONT></P>
<P><FONT FACE="Arial"><FONT SIZE=4>The (a) layered and (b)
object-based architectural style.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">2.
Object-based architectures</FONT></FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">each
			object corresponds a component</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">components
			are connected through a (remote) procedure call mechanism.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P>(<FONT SIZE=4><FONT FACE="Arial">The layered and object-based
architectures still form the most important styles for large software
systems)</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:245.25pt;
 height:214.5pt'>
 <v:imagedata src="./Chapter2a_files/image001.jpg" o:title="fg2-1a"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image002.jpg" NAME="graphics1" ALIGN=BOTTOM WIDTH=327 HEIGHT=286 BORDER=0>&nbsp;<!--[if gte vml 1]><v:shape id="_x0000_i1026"
 type="#_x0000_t75" style='width:238.5pt;height:209.25pt'>
 <v:imagedata src="./Chapter2a_files/image003.jpg" o:title="fg2-1b"/>
</v:shape><![endif]-->
<IMG SRC="Chapter2a_files/image004.jpg" NAME="graphics2" ALIGN=BOTTOM WIDTH=318 HEIGHT=279 BORDER=0></P>
<P>&nbsp;&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">3.
Data-centered architectures</FONT></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">processes
communicate through a common (passive or active) repository</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">e.g.
</FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">wealth
			of networked applications have been developed that rely on a
			shared distributed file system in which virtually all
			communication takes place through files. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Web-based
			distributed systems are largely data-centric: processes
			communicate through the use of shared Web-based data services.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">4.&nbsp;
Event-based architectures</FONT></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">processes
communicate through the propagation of events</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">e.g.
publish/subscribe systems (<A HREF="../../Papers/p114-eugster.pdf">Eugster
et al., 2003</A>). </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">processes
			publish events after which the middleware ensures that only those
			processes that subscribed to those events will receive them. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">advantage
- processes are loosely coupled. In principle, they need not
explicitly refer to each other. This is also referred to as being
decoupled in space, or referentially decoupled.</FONT></FONT></P>
<H2>&nbsp;Shared data spaces &ndash; combination of event-based
architectures with data-centered architectures.</H2>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">processes
are decoupled in time: they need not both be active when
communication takes place. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">many
shared data spaces use a SQL-like interface to the shared repository
- data can be accessed using a <I>description</I> rather than an
<I>explicit reference</I>, as is the case with files.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>The (a) event-based and (b) shared
data-space architectural style.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75"
 style='width:276.75pt;height:175.5pt'>
 <v:imagedata src="./Chapter2a_files/image005.jpg" o:title="fg2-2a"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image006.jpg" NAME="graphics3" ALIGN=BOTTOM WIDTH=369 HEIGHT=234 BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--[if gte vml 1]><v:shape id="_x0000_i1028"
 type="#_x0000_t75" style='width:287.25pt;height:179.25pt'>
 <v:imagedata src="./Chapter2a_files/image007.jpg" o:title="fg2-2b"/>
</v:shape><![endif]-->
<IMG SRC="Chapter2a_files/image008.jpg" NAME="graphics4" ALIGN=BOTTOM WIDTH=383 HEIGHT=239 BORDER=0></P>
<P>&nbsp;&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Aim of
Architectures</FONT>: achieving distribution transparency. </FONT></FONT>
</P>
<H3><FONT SIZE=4>System Architectures</FONT></H3>
<H3><FONT SIZE=4>Centralized Architectures</FONT></H3>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Manage
distributed system complexity</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">-
think in terms of clients that request services from servers.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#808000">Basic
client-server model:</FONT> </FONT></FONT>
</P>
<P><FONT FACE="Arial"><FONT SIZE=4>o Processes are divided into two
groups:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1. A server is a process
implementing a specific service, for example, a file system service
or a database service. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">2. A client is a process that
requests a service from a server by sending it a request and
subsequently waiting for the server's reply. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">General
interaction between a client and a server.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1029" type="#_x0000_t75"
 style='width:366.75pt;height:139.5pt'>
 <v:imagedata src="./Chapter2a_files/image009.jpg" o:title="fg2-3"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image010.jpg" NAME="graphics5" ALIGN=BOTTOM WIDTH=489 HEIGHT=186 BORDER=0></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><B>Communication</B> -
implemented using a <FONT COLOR="#0000ff">connectionless protocol</FONT>
when the network is reliable -&gt; e.g. local-area networks.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1. Client requests a service &ndash;
packages and sends a message for the server, identifying the service
it wants, along with the necessary input data. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">2.&nbsp;The Server will always
wait for an incoming request, process it, and package the results in
a reply message that is then sent to the client.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Connectionless
protocol</FONT></FONT></FONT> 
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Describes
communication between two network end points in which a message can
be sent from one end point to another without prior arrangement. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Device
at one end of the communication transmits data to the other, without
first ensuring that the recipient is available and ready to receive
the data. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">The
device sending a message sends it addressed to the intended
recipient. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">More
frequent problems with transmission than with connection-orientated
protocols and it may be necessary to resend the data several times. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">making
			the protocol resistant to occasional transmission failures is not
			trivial.</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">the
			client cannot detect whether the original request message was
			lost, or that transmission of the reply failed.</FONT></FONT></P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">If
				the reply was lost, then resending a request may result in
				performing the operation twice</FONT></FONT></P>
				<DL>
					<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot;  </FONT><FONT FACE="Arial">e.g.
					If operation was &quot;transfer $10,000 from my bank account,&quot;
					then clearly, it would have been better that we simply reported
					an error instead.</FONT></FONT></P>
				</DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">When
				an operation can be repeated multiple times without harm, it is
				said to be <FONT COLOR="#0000ff">idempotent</FONT></FONT></FONT></P>
			</DL>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Often
disfavored by network administrators because it is much harder to
filter malicious packets from a connectionless protocol using a
firewall. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">e.g.
connectionless protocols -The Internet Protocol (IP) and User
Datagram Protocol (UDP) are connectionless protocols,</FONT></FONT></P>
<P>&nbsp;&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Alternative
- <FONT COLOR="#0000ff">connection-oriented protocol</FONT> ( <A HREF="http://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP</A>
-the most common use of IP)</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">not
			appropriate in a local-area network due to relatively low
			performance</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">works
			fine in wide-area systems in which communication is inherently
			unreliable. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">e.g.
			virtually all Internet application protocols are based on reliable
			TCP/IP connections. </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">whenever
				a client requests a service, it first sets up a connection to the
				server before sending the request. </FONT></FONT>
				</P>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">The
				server uses that same connection to send the reply message, after
				which the connection is torn down. </FONT></FONT>
				</P>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Problem:
				setting up and tearing down a connection is relatively costly,
				especially when the request and reply messages are small.</FONT></FONT></P>
			</DL>
		</DL>
	</DL>
</DL>
<H3>&nbsp;<FONT SIZE=4>Application Layering</FONT></H3>
<P><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>Issues with
Client / Server:</FONT></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">How
to draw a clear distinction between a client and a server. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Often
no clear distinction. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O  </FONT><FONT FACE="Arial">e.g.
			a server for a distributed database may continuously act as a
			client because it is forwarding requests to different file servers
			responsible for implementing the database tables. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Since many client-server
applications are targeted toward supporting user access to databases,
<B>distinctions may be analyzed in a layered architectural style</B>:</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial">1. <FONT COLOR="#0000ff">The
user-interface level</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">-
contains all that is necessary to directly interface with the user,
such as display management</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Clients
typically implement the user-interface level</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">simplest
			user-interface program - character-based screen</FONT></FONT></P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">the
				user's terminal does some local processing such as echoing typed
				keystrokes, or supporting form-like interfaces in which a
				complete entry is to be edited before sending it to the main
				computer</FONT></FONT></P>
			</DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Simple
			GUI </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">pop-up
				or pull-down menus are used with many screen controls handled
				through a mouse instead of the keyboard.</FONT></FONT></P>
			</DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Modern
			user interfaces offer considerably more functionality by allowing
			applications to share a single graphical window, and to use that
			window to exchange data through user actions.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">2. <FONT COLOR="#0000ff">The
processing level</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">-
contains the applications</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">middle
part of hierarchy -&gt; logically placed at the processing level</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">3. <FONT COLOR="#0000ff">The
data level</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">-
manages the actual data that is being acted on</FONT></FONT></P>
<H4><FONT COLOR="#b84700">&nbsp;<FONT FACE="Arial"><FONT SIZE=4>Example</FONT>:
Internet search engine </FONT></FONT>
</H4>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">User-interface
level</FONT>: a user types in a string of keywords and is
subsequently presented with a list of titles of Web pages. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">Data
Level</FONT>: huge database of Web pages that have been prefetched
and indexed. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">Processing
level:</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">- search
engine that transforms the user's string of keywords into one or more
database queries. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">ranks
the results into a list</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">transforms
that list into a series of HTML pages</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Simplified organization of an
Internet search engine into three different layers.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1030" type="#_x0000_t75"
 style='width:512.25pt;height:278.25pt'>
 <v:imagedata src="./Chapter2a_files/image011.jpg" o:title="fg2-4"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image012.jpg" NAME="graphics6" ALIGN=BOTTOM WIDTH=683 HEIGHT=371 BORDER=0></P>
<P>&nbsp;</P>
<H2>Client-Server Model &ndash; Data Level</H2>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Contains
the programs that maintain the actual data on which the applications
operate. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Data
are often persistent - even if no application is running, data will
be stored somewhere for next use. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Data
level consists of a file system, but it is more common to use a
full-fledged database. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Data
level is typically implemented at the server side.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Responsible
for keeping data consistent across different applications. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">With
			databases - metadata such as table descriptions, entry constraints
			and application-specific metadata are also stored at this level. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><B>Relational
database</B> organize most business-oriented data. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Data
			independence is crucial </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot;  </FONT><FONT FACE="Arial">data
				are organized independent of the applications in such a way that
				changes in that organization do not affect applications, and
				neither do the applications affect the data organization. </FONT></FONT>
				</P>
			</DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Using
			relational databases in the client-server model helps separate the
			processing level from the data level, as processing and data are
			considered independent.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Other
Data base choices &ndash; </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">many
			applications operate on complex data types that are more easily
			modeled in terms of <FONT COLOR="#0000ff">objects</FONT> than in
			terms of relations.</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">implement
			the data level by means of an object-oriented or object-relational
			database. </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">built
				upon the widely dispersed relational data model, while offering
				the advantages ofobject-orientation.</FONT></FONT></P>
			</DL>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<H3><FONT SIZE=4>Multitiered Architectures</FONT></H3>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">Possibilities for physically
distributing a client-server application across several machines. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">Simplest
organization - two types of machines</FONT>:</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Arial">1. A client machine
			containing only the programs implementing (part of) the
			user-interface level</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Arial">2. A server machine
			containing the rest, that is the programs implementing the
			processing and data level </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o&nbsp; </FONT><FONT FACE="Arial">Everything
			is handled by the server while the client is essentially no more
			than a dumb terminal, possibly with a pretty graphical interface. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">Distribute
the programs in the application layers across different machines</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">[<A HREF="../../Papers/p117-jing.pdf">Jing
et al. (1999)</A> ]. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Two-tiered
			architecture: client machines and server machines.</FONT></FONT></P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Alternative
			client-server organizations (a)&ndash;(e).</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1031" type="#_x0000_t75"
 style='width:513pt;height:222.75pt'>
 <v:imagedata src="./Chapter2a_files/image013.jpg" o:title="fg2-5"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image014.jpg" NAME="graphics7" ALIGN=BOTTOM WIDTH=684 HEIGHT=297 BORDER=0></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Cases:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">A</FONT>:
only the terminal-dependent part of the user interface on the client
machine</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">B</FONT>:
place the entire user-interface software on the client side</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Divide
the application into a graphical front end, which communicates with
the rest of the application (residing at the server) through an
application-specific protocol. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">the
front end (the client software) does no processing other than
necessary for presenting the application's interface</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">C</FONT>:
move part of the application to the front end</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">e.g.
the application makes use of a form that needs to be filled in
entirely before it can be processed</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">front
			end can then check the correctness and consistency of the form,
			and where necessary interact with the user</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">D</FONT>:
used where the client machine is a PC or workstation, connected
through a network to a distributed file system or database</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">most
of the application is running on the client machine, but all
operations on files or database entries go to the server</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">e.g.
many banking applications run on an end-user's machine where the user
prepares transactions and such</FONT></FONT></P>
<P><FONT FACE="Arial"><FONT SIZE=4>Once finished, the application
contacts the database on the bank's server and uploads the
transactions for further processing</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">E</FONT>:
used where the client machine is a PC or workstation, connected
through a network to a distributed file system or database</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">the
situation where the client's local disk contains part of the data</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>Issues:</FONT></FONT></FONT></P>
<P><FONT FACE="Arial"><FONT SIZE=4>Trend to move away from the
configurations <FONT COLOR="#0000ff">D</FONT> and <FONT COLOR="#0000ff">E</FONT>.
</FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Although
client machines do a lot, they are also more problematic to manage</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Having
more functionality on the client machine makes client-side software
more prone to errors and more dependent on the client's underlying
platform (i.e., operating system and resources). </FONT></FONT>
</P>
<P><FONT FACE="Courier New">O </FONT><FONT SIZE=4><FONT FACE="Arial">
From a system's management perspective, having fat clients is not
optimal. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o&nbsp;</FONT><FONT FACE="Arial">Thin
clients in <FONT COLOR="#0000ff">A &ndash; C</FONT> are much easier </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Trend: server-side solutions are
becoming increasingly more distributed as a single server is being
replaced by multiple servers running on different machines. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">a
server may sometimes need to act as a client leading to a
(physically) three-tiered architecture.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Example
of a server acting as client. </FONT></FONT>
</P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1032" type="#_x0000_t75"
 style='width:512.25pt;height:3in'>
 <v:imagedata src="./Chapter2a_files/image015.jpg" o:title="fg2-6"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image016.jpg" NAME="graphics8" ALIGN=BOTTOM WIDTH=683 HEIGHT=288 BORDER=0></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Programs
that form part of the processing level reside on a separate server,
but may additionally be partly distributed across the client and
server machines. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">e.g.&nbsp;
			three-tiered architecture - organization of Web sites. </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Web
				server acts as an entry point to a site, passing requests to an
				application server where the actual processing takes place. </FONT></FONT>
				</P>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Application
				server interacts with a database server. </FONT></FONT>
				</P>
				<DL>
					<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">e.g.,
					an application server may be responsible for running the code to
					inspect the available inventory of some goods as offered by an
					electronic bookstore. To do so, it may need to interact with a
					database containing the raw inventory data. </FONT></FONT>
					</P>
				</DL>
			</DL>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<H3><FONT COLOR="#0000ff"><FONT SIZE=5><B>Decentralized Architectures</B></FONT></FONT></H3>
<H2>Vertical Distribution Architecture</H2>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Achieved
by placing logically different components on different machines</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">term
is related to the concept of <FONT COLOR="#0000ff">vertical
fragmentation</FONT> as used in distributed relational databases,
where it means that tables are split column-wise, and subsequently
distributed across multiple machines</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Multitiered
client-server architectures are a direct consequence of dividing
applications into a user-interface, processing components, and a data
level. The different tiers correspond directly with the logical
organization of applications. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Vertical
Distribution</FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">-
organizing a client-server application as a multitiered architecture.
</FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Can
help manage distributed systems by logically and physically splitting
functions across multiple machines, where each machine is tailored to
a specific group of functions. </FONT></FONT>
</P>
<P>&nbsp;</P>
<H2>Horizontal Distribution Architecture</H2>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Client
or server may be physically split up into logically equivalent parts,
but each part is operating on its own share of the complete data set,
thus balancing the load.</FONT></FONT></P>
<P><FONT FACE="Arial"><FONT SIZE=4>e.g peer-to-peer systems.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Processes
that constitute a peer-to-peer system are all equal. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Functions
that need to be carried out are represented by every process that
constitutes the distributed system. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Much
of the interaction between processes is symmetric: </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">each
			process will act as a client and a server at the same time (which
			is also referred to as acting as a servent).</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Peer-to-peer
architectures - how to organize the processes in an overlay network
in which the nodes are formed by the processes and the links
represent the possible communication channels (which are usually
realized as TCP connections). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
Process cannot communicate directly with an arbitrary other process,
but is required to send messages through the available communication
channels. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Two
types of overlay networks exist: those that are structured and those
that are not. (<A HREF="../../Papers/castro_myths_overlays.pdf">Castro
et al. 2005</A>).</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Survey
			paper (<A HREF="../../Papers/Lua_survey_overlay.pdf">Lua et al.
			2005</A>). </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">A
			reference architecture that allows for a more formal comparison of
			the different types of peer-to-peer systems (<A HREF="../../Papers/aberer_the-essence-of-p.pdf">Aberer
			et al. 2005</A>) provide a reference architecture that allows for
			a more formal comparison of the different types of peer-to-peer
			systems. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
			survey taken from the perspective of content distribution is
			provided by (<A HREF="../../Papers/p335-androutsellis-theotokis.pdf">Androutsellis-Theotokis
			and Spinellis 2004</A>).</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<H3><FONT SIZE=5>Structured Peer-to-Peer Architectures</FONT></H3>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">The
P2P <A HREF="http://en.wikipedia.org/wiki/Overlay_network">overlay
network</A> consists of all the participating peers as network nodes.
</FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">There
are links between any two nodes that know each other: i.e. if a
participating peer knows the location of another peer in the P2P
network, then there is a directed edge from the former node to the
latter in the overlay network. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Based
on how the nodes in the overlay network are linked to each other, we
can classify the P2P networks as unstructured or structured.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Some
well known structured P2P networks are <A HREF="http://pdos.csail.mit.edu/chord/">Chord</A>,
<A HREF="http://freepastry.org/">Pastry</A>, <A HREF="http://p2p.cs.ucsb.edu/chimera/html/home.html">Tapestry</A>,
CAN, and <A HREF="../../Papers/Tulip_p2p.pdf">Tulip</A>.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">A
structured Peer-to-Peer</FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">overlay
network is constructed using a deterministic procedure.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Most-used
procedure - organize the processes through a <A HREF="http://en.wikipedia.org/wiki/Distributed_hash_table"><FONT COLOR="#0000ff">distributed
hash table</FONT></A> (DHT).&nbsp; (<A HREF="http://en.wikipedia.org/wiki/Hash_table">Hash
Table description</A>)</FONT></FONT></P>
<H5><FONT FACE="Arial"><FONT SIZE=4>o&nbsp; DHT-based system &ndash; </FONT></FONT>
</H5>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial"><FONT COLOR="#0000ff">data
			items</FONT></FONT></FONT> <FONT SIZE=4><FONT FACE="Arial">are
			assigned a random key from a large identifier space, such as a
			128-bit or 160-bit identifier. </FONT></FONT>
			</P>
			<DD><P><FONT FACE="Courier New">O </FONT><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">nodes</FONT>
			are assigned a random number from the same identifier space. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P><FONT FACE="Courier New">O </FONT><FONT SIZE=4><FONT FACE="Arial">DHT-based
system implements an efficient and deterministic scheme that uniquely
maps the key of a data item to the identifier of a node based on some
distance metric (</FONT></FONT><A HREF="../../Papers/balakrishnan_p2p_cacm03.pdf"></A><A HREF="../../Papers/balakrishnan_p2p_cacm03.pdf"><FONT SIZE=4><FONT FACE="Arial">Balakrishnan,
2003</FONT></FONT></A><A HREF="../../Papers/balakrishnan_p2p_cacm03.pdf"></A><FONT SIZE=4><FONT FACE="Arial">).
</FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">When
looking up a data item, the network address of the node responsible
for that data item is returned. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">This
is accomplished by routing a request for a data item to the
responsible node.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">Example</FONT>:
Chord system (<A HREF="../../Papers/stoica_p2p_lookup.pdf">Stoica et
al., 2003</A>) the nodes are logically organized in a ring such that
a data item with key k is mapped to the node with the smallest
identifier idk. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">This
node is referred to as the successor of key k and denoted as succ(k)</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">To
look up the data item an application running on an arbitrary node
would then call the function LOOKUP(k) which would subsequently
return the network address of succ(k). At that point, the application
can contact the node to obtain a copy of the data item.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">The mapping of data items
onto nodes in Chord.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1033" type="#_x0000_t75"
 style='width:269.25pt;height:267pt'>
 <v:imagedata src="./Chapter2a_files/image017.jpg" o:title="fg2-7"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image018.jpg" NAME="graphics9" ALIGN=BOTTOM WIDTH=359 HEIGHT=356 BORDER=0></P>
<P>&nbsp;</P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff0000">How do
nodes organize themselves into an overlay network?</FONT></FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Looking
up a key does not follow the logical organization of nodes in the
ring. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Each
node will maintain shortcuts to other nodes in such a way that
lookups can generally be done in &Omicron;(log (N)) number of steps,
where N is the number of nodes participating in the overlay.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4><B>Joining the P2P Network</B></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1.&nbsp;When a node wants to join
the system, it starts with generating a random identifier id. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">2. Then, the node can simply do a
lookup on id, which will return the network address of succ(id). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">3.&nbsp;The joining node then
contacts succ(id) and its predecessor and insert itself in the ring. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Arial">a. This scheme requires
			that each node also stores information on its predecessor. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Arial">b. Insertion also yields
			that each data item whose key is now associated with node id, is
			transferred from succ(id).</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;<B><FONT SIZE=4><FONT FACE="Arial">Leaving the P2P Network </FONT></FONT></B>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">1.&nbsp;node id informs its
departure to its predecessor and successor</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">2. transfers its data items to
succ(id).</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff9900">Content
Addressable Network (CAN)</FONT></FONT></FONT><FONT COLOR="#0000ff">
&ndash; <FONT SIZE=4><FONT FACE="Arial">(</FONT></FONT></FONT><FONT SIZE=4><FONT FACE="Arial"><A HREF="../../Papers/CAN_ratnasamy.pdf">Ratnasamy
et al. 2001</A>).</FONT></FONT></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">CAN deploys a d-dimensional
	Cartesian coordinate space, which is completely partitioned among
	all all the nodes that participate in the system. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Example: 2-dimensional case </FONT></FONT>
	</P>
</UL>
<P>&nbsp;<FONT FACE="Arial"><FONT SIZE=4>(a) The mapping of data
items onto nodes in CAN. (b) Splitting a region when a node joins.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1034" type="#_x0000_t75"
 style='width:222.75pt;height:255.75pt'>
 <v:imagedata src="./Chapter2a_files/image019.jpg" o:title="fg2-8a"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image020.jpg" NAME="graphics10" ALIGN=BOTTOM WIDTH=297 HEIGHT=341 BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--[if gte vml 1]><v:shape id="_x0000_i1035"
 type="#_x0000_t75" style='width:235.5pt;height:254.25pt'>
 <v:imagedata src="./Chapter2a_files/image021.jpg" o:title="fg2-8b"/>
</v:shape><![endif]-->
<IMG SRC="Chapter2a_files/image022.jpg" NAME="graphics11" ALIGN=BOTTOM WIDTH=314 HEIGHT=339 BORDER=0></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Two-dimensional
space [0,1]x[0,1] is divided among six nodes. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Each
node has an associated region. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Every
data item in CAN will be assigned a unique point in this space, after
which it is also clear which node is responsible for that data
(ignoring data items that fall on the border of multiple regions, for
which a deterministic assignment rule is used).</FONT></FONT></P>
<P>&nbsp;</P>
<H6><FONT FACE="Arial"><FONT SIZE=4>Joining CAN</FONT></FONT></H6>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">When
a node P wants to join a CAN system, it picks an arbitrary point from
the coordinate space and subsequently looks up the node Q in whose
region that point falls. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Node
Q then splits its region into two halves and one half is assigned to
the node P. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Nodes
keep track of their neighbors, that is, nodes responsible for
adjacent region. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">When
splitting a region, the joining node P can easily come to know who
its new neighbors are by asking node P. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">As
in Chord, the data items for which node P is now responsible are
transferred from node Q.</FONT></FONT></P>
<P><FONT FACE="Arial"><FONT SIZE=4><B>Leaving CAN</B></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Assume
that the node with coordinate (0.6,0.7) leaves. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Its
region will be assigned to one of its neighbors, say the node at
(0.9,0.9), but it is clear that simply merging it and obtaining a
rectangle cannot be done. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">In
this case, the node at (0.9,0.9) will simply take care of that region
and inform the old neighbors of this fact. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">This
may lead to less symmetric partitioning of the coordinate space, for
which reason a background process is periodically started to
repartition the entire space.</FONT></FONT></P>
<P>&nbsp;</P>
<H3><FONT FACE="Arial">Unstructured Peer-to-Peer Architectures
(</FONT><A HREF="../../Papers/risson_p2p-overview.pdf"><FONT FACE="Arial">Risson
and Moors, 2006</FONT></A><FONT FACE="Arial">).</FONT></H3>
<P> <FONT SIZE=4><FONT FACE="Arial">An unstructured P2P network is
formed when the overlay links are established arbitrarily. </FONT></FONT>
</P>
<UL>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Such networks can be easily
	constructed as a new peer that wants to join the network can copy
	existing links of another node and then form its own links over
	time. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">In an unstructured P2P
	network, if a peer wants to find a desired piece of data in the
	network, the query has to be flooded through the network in order to
	find as many peers as possible that share the data. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Main disadvantage - queries
	may not always be resolved. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Popular content is likely to
	be available at several peers and any peer searching for it is
	likely to find the same thing, but, if a peer is looking for a rare
	or not-so-popular data shared by only a few other peers, then it is
	highly unlikely that search will be successful. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Since there is no
	correlation between a peer and the content managed by it, there is
	no guarantee that flooding will find a peer that has the desired
	data. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Flooding also causes a high
	amount of signaling traffic in the network and hence such networks
	typically have very poor search efficiency. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Most of the popular P2P
	networks such as Napster, Gnutella and KaZaA are unstructured.</FONT></FONT></P>
</UL>
<UL>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Rely on randomized
	algorithms for constructing an overlay network. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Each node maintains a list of
	neighbors constructed in a more or less random way. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Data items are assumed to be
	randomly placed on nodes.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#ff9900">Goal</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">- construct an overlay network that
resembles a <A HREF="http://en.wikipedia.org/wiki/Random_graph">random
graph</A>. (<A HREF="../../Papers/rand_graph_networks.pdf">survey</A>)</FONT></FONT></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Each node maintains a list of
	<FONT COLOR="#0000ff">c</FONT> neighbors, where each of these
	neighbors represents a randomly chosen live node from the current
	set of nodes. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The list of neighbors is
	referred to as a partial view. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Many ways to construct a
	partial view. (Jelasity et al. <A HREF="../../Papers/p79-jelasity.pdf">2004</A>).
	</FONT></FONT>
	</P>
</UL>
<P>&nbsp;</P>
<H2>&nbsp;Superpeers (<A HREF="../../Papers/superpeer.pdf">overview</A>)</H2>
<P><FONT FACE="Arial"><FONT SIZE=4>Network nodes that maintaining an
index of node or acting as a broker for nodes are generally referred
to as superpeers.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">Unstructured peer-to-peer
systems - locating relevant data items can become problematic as the
network grows. </FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">no deterministic way of
	routing a lookup request to a specific data item -&gt; only
	technique a node can resort to is flooding the request. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">flooding can be dammed-&gt;
	alternative -&gt; use special nodes that maintain an index of data
	items.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Other situations in which
abandoning the symmetric nature of peer-to-peer systems is sensible. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#dc2300">Example:</FONT>
collaboration of nodes that offer resources to each other. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">in
			a collaborative content delivery network (CDN), nodes may offer
			storage for hosting copies of Web pages allowing Web clients to
			access pages nearby, and thus to access them quickly. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">A
			node P may need to seek for resources in a specific part of the
			network. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Making
			use of a broker that collects resource usage for a number of nodes
			that are in each other's proximity will allow to quickly select a
			node with sufficient resources.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">A hierarchical organization
of nodes into a superpeer network.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1036" type="#_x0000_t75"
 style='width:468.75pt;height:303pt'>
 <v:imagedata src="./Chapter2a_files/image023.jpg" o:title="fg2-12"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image023.jpg" NAME="graphics12" ALIGN=BOTTOM WIDTH=625 HEIGHT=404 BORDER=0></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The client-superpeer relation
	is fixed n many cases: whenever a regular peer joins the network, it
	attaches to one of the superpeers and remains attached until it
	leaves the network. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Expected that superpeers are
	long-lived processes with a high availability. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">To compensate for potential
	unstable behavior of a superpeer, backup schemes can be deployed,
	such as pairing every superpeer with another one and requiring
	clients to attach to both.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<H3><FONT SIZE=5>Hybrid Architectures</FONT></H3>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial">E<B>dge-Server Systems</B></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Deployed
on the Internet where servers are placed &quot;at the edge&quot; of
the network. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">purpose
is to serve content, possibly after applying filtering and
transcoding functions</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">a
collection of edge servers can be used to optimize content and
application distribution</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">This
edge is formed by the boundary between enterprise networks and the
actual Internet</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">e.g,
an Internet Service Provider (ISP). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">e.g.
end users at home connect to the Internet through their ISP, the ISP
can be considered as residing at the edge of the Internet. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Viewing
the Internet as consisting of a collection of edge servers.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1037" type="#_x0000_t75"
 style='width:513pt;height:193.5pt'>
 <v:imagedata src="./Chapter2a_files/image024.jpg" o:title="fg2-13"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image025.jpg" NAME="graphics13" ALIGN=BOTTOM WIDTH=684 HEIGHT=258 BORDER=0></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Basic model</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">- one edge server acts as an origin
server from which all content originates. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">That server can use other edge
servers for replicating Web pages and such (<A HREF="../../Papers/p195-leff.pdf">Leff
et al., 2004</A><A HREF="../../Papers/nayate_TRIP.pdf">;&nbsp; Nayate
et al., 2004</A>). </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=5><B>Collaborative Distributed Systems</B></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Hybrid
architectures are deployed in collaborative distributed systems. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Two
step process:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1. Join system using a traditional
client-server scheme. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">2. Once a node has joined the
system - use a fully decentralized scheme for collaboration.</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Example:</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">the BitTorrent file-sharing system
(<A HREF="../../Papers/cohen_bittorrentecon.pdf">Cohen, 2003</A>). </FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">BitTorrent is a peer-to-peer
	file downloading system. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">An end user downloads chunks
	of a file from other users until the downloaded chunks can be
	assembled together yielding the complete file.</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">BitTorrent combines
	centralized with decentralized solutions.</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The principal working of
	BitTorrent </FONT></FONT>
	</P>
</UL>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1038" type="#_x0000_t75"
 style='width:512.25pt;height:151.5pt'>
 <v:imagedata src="./Chapter2a_files/image026.jpg" o:title="fg2-14"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image027.jpg" NAME="graphics14" ALIGN=BOTTOM WIDTH=683 HEIGHT=202 BORDER=0></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Design goal - ensure
	collaboration. </FONT></FONT>
	</P>
</UL>
<P><FONT SIZE=4><FONT FACE="Arial">1. Most file-sharing systems -
participants download files only (<A HREF="../../Papers/adar_gnutella.pdf">Adar
and Huberman, 2000</A>; <A HREF="../../Papers/saroiu_napster.pdf">Saroiu
et al., 2003</A>; and <A HREF="../../Papers/yang_maze.pdf">Yang et
al., 2005</A>). </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>File
download process:</FONT></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1.&nbsp;Access a global directory
of one of a few well-known Web sites. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Directory
			contains references to what are called .torrent files. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
			.torrent file contains the information that is needed to download
			a specific file. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">It
			refers to a <FONT COLOR="#0000ff">tracker</FONT> - a server that
			keeps an accurate account of active nodes that have (chunks) of
			the requested file. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">An
			active node is one that is currently downloading another file. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Many
			different trackers - but only a single tracker per file (or
			collection of files).</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial">2. Once the nodes have been
identified from where chunks can be downloaded - the downloading node
becomes active. </FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">This node will be forced to
	help others by providing chunks of the file it is downloading that
	others do not yet have. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Enforcement comes from a very
	simple rule: if node P notices that node Q is downloading more than
	it is uploading, P can decide to decrease the rate at which it sends
	data to Q. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">This scheme works well
	provided P has something to download from Q. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">For this reason, nodes are
	often supplied with references to many other nodes putting them in a
	better position to trade data.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4><B>System bottleneck is formed by
the trackers.</B></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Example:</FONT></FONT></FONT>&nbsp;
<FONT SIZE=4><FONT FACE="Arial">the <A HREF="http://www.globule.org/index.html">Globule</A>
(<A HREF="../../Papers/globule_GCCDN_commag2006.pdf">paper</A>)
collaborative content distribution network.</FONT></FONT></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Globule strongly resembles
	the edge-server architecture. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Instead of edge servers, end
	users (but also organizations) voluntarily provide enhanced Web
	servers that are capable of collaborating in the replication of Web
	pages. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Each such server has the
	following components:</FONT></FONT></P>
</UL>
<P><FONT SIZE=4><FONT FACE="Arial">1. A component that can redirect
client requests to other servers.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">2. A component for analyzing
access patterns.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">3. A component for managing the
replication of Web pages.</FONT></FONT></P>
<P>&nbsp;</P>
<H3><FONT SIZE=5>Architectures Versus Middleware</FONT></H3>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Middleware forms a layer
	between applications and distributed platforms </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Provide a degree of
	distribution transparency,hiding the distribution of data,
	processing, and control from applications.</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Where middleware fits in?</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<H5><FONT FACE="Arial"><FONT SIZE=4>Middleware systems follow a
specific architectural style </FONT></FONT>
</H5>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Object-based architectural
	style - CORBA </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Event-based architectural
	style - TIB/Rendezvous </FONT></FONT>
	</P>
</UL>
<P>&nbsp;</P>
<P><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>Problems:</FONT></FONT></FONT></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Molding middleware molded to
	a specific architectural style makes designing applications simpler
	<FONT COLOR="#0000ff">BUT</FONT> the middleware may no longer be
	optimal for what an application developer had in mind.</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Middleware is meant to
	provide distribution transparency, <FONT COLOR="#0000ff">BUT</FONT>
	specific solutions should be adaptable to application requirements. </FONT></FONT>
	</P>
</UL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Solutions:</FONT></FONT></FONT></P>
<P> <B><FONT SIZE=4><FONT FACE="Arial">Good:</FONT></FONT></B> <FONT SIZE=4><FONT FACE="Arial">Make
several versions of a middleware system, where each version is
tailored to a specific class of applications.</FONT></FONT></P>
<P> <B><FONT SIZE=4><FONT FACE="Arial">Better:</FONT></FONT></B> <FONT SIZE=4><FONT FACE="Arial">Make
middleware systems that are easy to configure, adapt, and customize
as needed by an application. </FONT></FONT>
</P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Results:</FONT></FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Systems are now developed
	with a stricter separation between policies and mechanisms. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Led to mechanisms by which
	the behavior of middleware can be modified (<A HREF="../../Papers/sadjadi_AdaptiveMiddlewareSurvey.pdf">Sadjadi
	and McKinley, 2003</A>). </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Commonly followed approach:</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<P><FONT COLOR="#ff0000"><FONT FACE="Arial"><FONT SIZE=4><B>Interceptors</B></FONT></FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">An <FONT COLOR="#0000ff">interceptor</FONT>
is a software construct that will break the usual flow of control and
allow other (application specific) code to be executed. </FONT></FONT>
</P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#0000ff">Example:</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">consider interception as supported in
many object-based distributed systems. </FONT></FONT>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">An object A can call a method
	that belongs to an object B, while the latter resides on a different
	machine than A. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">This remote-object invocation
	is carried out in 3 steps:</FONT></FONT></P>
</UL>
<P><FONT SIZE=4><FONT FACE="Arial">1.  Object A is offered a local
interface that is exactly the same as the interface offered by object
B. A simply calls the method available in that interface.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">2. The call by A is
transformed into a generic object invocation, made possible through a
general object-invocation interface offered by the middleware at the
machine where A resides.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">3. Finally, the generic
object invocation is transformed into a message that is sent through
the transport-level network interface as offered by A's local
operating system.</FONT></FONT></P>
<UL>
	<LI><P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">Using interceptors to
	handle remote-object invocations.</FONT></FONT></P>
</UL>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1039" type="#_x0000_t75"
 style='width:452.25pt;height:342.75pt'>
 <v:imagedata src="./Chapter2a_files/image028.jpg" o:title="fg2-15"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image028.jpg" NAME="graphics15" ALIGN=BOTTOM WIDTH=603 HEIGHT=457 BORDER=0></P>
<P><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>Above
Figure:</FONT></FONT></FONT></P>
<OL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">After the first step, the
	call <FONT COLOR="#0000ff">B.do_something(value)</FONT> is
	transformed into a generic call such as invoke(B, &amp;do_something,
	value) with a reference to B's method and the parameters that go
	along with the call. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Assume that object B is
	replicated. </FONT></FONT>
	</P>
</OL>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Here, each replica should be
	invoked. </FONT></FONT>
	</P>
</UL>
<OL START=3>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Interception helps here the
	request-level interceptor will call <FONT COLOR="#0000ff">invoke(B,
	&amp;do_something, value)</FONT> for each of the replicas. </FONT></FONT>
	</P>
</OL>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Object A need not be aware of
	the replication of B</FONT></FONT></P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The object middleware need
	not have special components that deal with this replicated call. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Only the request-level
	interceptor, which may be added to the middleware needs to know
	about B's replication.</FONT></FONT></P>
</UL>
<P><BR><BR>
</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">A call to a remote object
	will have to be sent over the network. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">The messaging interface as
	offered by the local operating system will need to be invoked. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">At that level, a
	message-level interceptor may assist in transferring the invocation
	to the target object. </FONT></FONT>
	</P>
</UL>
<P><FONT SIZE=4><FONT FACE="Courier New">o</FONT><FONT FACE="Arial"><B>Example</B>:
</FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">imagine
			that the parameter value actually corresponds to a huge array of
			data. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">may
			be wise to fragment the data into smaller parts to have it
			assembled again at the destination. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">the
			middleware need not be aware of this fragmentation; the
			lower-level interceptor will transparently handle the rest of the
			communication with the local operating system.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<H3><FONT FACE="Arial"><FONT SIZE=4>General Approaches to Adaptive
Software</FONT></FONT></H3>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Environment
in which distributed applications are executed changes continuously</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Changes
include:</FONT></FONT></P>
<UL>
	<LI><P> &nbsp;<FONT SIZE=4><FONT FACE="Arial">mobility </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">variance in the
	quality-of-service of networks</FONT></FONT></P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">failing hardware</FONT></FONT></P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">battery drainage</FONT></FONT></P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">etc.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<H2><FONT FACE="Arial"><FONT SIZE=4>Adaptive software for middleware&nbsp;
</FONT></FONT>
</H2>
<P><FONT SIZE=4><FONT FACE="Arial">Three basic techniques to come to
software adaptation and open research area (<A HREF="../../Papers/mckinley_ComposingAdaptiveSoftware.pdf">McKinley
et al. 2004</A>):</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">1.&nbsp;&nbsp;&nbsp;
Separation of concerns</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">separate
the parts that implement functionality from those that take care of
other things (known as extra functionalities) such as reliability,
performance, security, etc</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">cannot
easily separate these extra functionalities by means of
modularization</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">aspect-oriented
software development used to address separation of concerns (<A HREF="../../Papers/kiczales97aspectoriented.pdf">Kiczales
et al. 1997</A>)</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial">2.&nbsp;&nbsp;&nbsp; Computational
reflection</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">the
ability of a program to inspect itself and, if necessary, adapt its
behavior (<A HREF="../../Papers/kon_cacm02.pdf">Kon et al., 2002</A>).</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial">3.&nbsp;&nbsp;&nbsp;
Component-based design</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Supports
adaptation through composition. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">A
system may either be configured statically at design time, or
dynamically at runtime. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">The
			latter requires support for late binding, a technique that has
			been successfully applied in programming language environments,
			but also for operating systems where modules can be loaded and
			unloaded at will. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P>&nbsp;<B><FONT SIZE=4><FONT FACE="Arial">2.4. Self-Management in
Distributed Systems</FONT></FONT></B></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">Must organize the components
of a distributed system such that monitoring and adjustments can be
done</FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Organize distributed systems as
high-level feedback-control systems to allow automatic adaptations to
changes:&nbsp; </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Autonomic
computing (<A HREF="../../Papers/kephart_AC_Vision_Computer_Jan_2003.pdf">Kephart,
2003</A>) </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Self-star
systems - indicates the variety by which automatic adaptations are
being captured: self-managing, self-healing, self-configuring,
self-optimizing, etc. </FONT></FONT>
</P>
<P>&nbsp;</P>
<H3><FONT COLOR="#0000ff"><FONT FACE="Arial"><FONT SIZE=4>The
Feedback Control Model</FONT></FONT></FONT></H3>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Adaptations
take place by means of one or more feedback control loops.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Systems
that are organized by means of such loops are referred to as feedback
control systems. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Feedback
control has since long been applied in various engineering fields,
and its mathematical foundations are gradually also finding their way
in computing systems (<A HREF="../../Papers/Diao_23080441.pdf">Diao
et al., 2005</A>). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">For
self-managing systems, the architectural issues are initially the
most interesting. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">The
basic idea behind this organization is :</FONT></FONT></P>
<P>&nbsp;<!--[if gte vml 1]><v:shape id="_x0000_i1040" type="#_x0000_t75"
 style='width:512.25pt;height:231.75pt'>
 <v:imagedata src="./Chapter2a_files/image029.jpg" o:title="fg2-16"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image030.jpg" NAME="graphics16" ALIGN=BOTTOM WIDTH=683 HEIGHT=309 BORDER=0></P>
<P><BR><BR>
</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Three elements that form the
feedback control loop:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">1.&nbsp;&nbsp;&nbsp; The system
itself needs to be monitored, which requires that various aspects of
the system need to be measured. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">2.&nbsp;&nbsp;&nbsp; Another part
of the feedback control loop analyzes the measurements and compares
these to reference values. This feedback analysis component forms the
heart of the control loop, as it will contain the algorithms that
decide on possible adaptations.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Arial">3.&nbsp;&nbsp;&nbsp; The last
group of components consist of various mechanisms to directly
influence the behavior of the system. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">There
			can be many different mechanisms: placing replicas, changing
			scheduling priorities, switching services, moving data for reasons
			of availability, redirecting requests to different servers, etc. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">The
			analysis component will need to be aware of these mechanisms and
			their (expected) effect on system behavior. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Arial"><FONT COLOR="#808000">Example:</FONT></FONT></FONT>
<FONT SIZE=4><FONT FACE="Arial">Systems Monitoring with Astrolabe</FONT></FONT></P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Astrolabe (<A HREF="../../Papers/Astrolabe.pdf">Van
	Renesse et al., 2003</A>): a system that can support general
	monitoring of very large distributed systems. </FONT></FONT>
	</P>
	<LI><P> <FONT SIZE=4><FONT FACE="Arial">Astrolabe is a general tool
	for observing systems behavior. </FONT></FONT>
	</P>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Its output can be used to
	feed into an analysis component for deciding on corrective actions.</FONT></FONT></P>
</UL>
<P>&nbsp;</P>
<UL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Astrolabe organizes a large
	collection of hosts into a hierarchy of zones. </FONT></FONT>
	</P>
</UL>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">The
lowest-level zones consist of a single host, which are subsequently
grouped into zones of increasing size. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect;  </FONT><FONT FACE="Arial">The
top-level zone covers all hosts. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Every
host runs an Astrolabe process, called an agent, that collects
information on the zones in which that host is contained. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">The
agent communicates with other agents with the aim to spread zone
information across the entire system.</FONT></FONT></P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Each
host maintains a set of attributes for collecting local information. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">e.g,
a host may keep track of specific files it stores, its resource
usage, etc. </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Example:
Three hosts: A, B, and C grouped into a zone. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Arial">Each machine keeps track of its IP
address, CPU load, available free memory, and the number of active
processes. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Each
of these attributes can be directly written using local information
from each host. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">At
the zone level, only aggregated information can be collected, such as
the average CPU load, or the average number of active processes.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Data
collection and information aggregation in Astrolabe.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1041" type="#_x0000_t75"
 style='width:388.5pt;height:225pt'>
 <v:imagedata src="./Chapter2a_files/image031.jpg" o:title="fg2-17"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image032.jpg" NAME="graphics17" ALIGN=BOTTOM WIDTH=518 HEIGHT=300 BORDER=0></P>
<P>&nbsp;</P>
<P><FONT FACE="Arial"><FONT SIZE=4>Figure shows how the information
as gathered by each machine can be viewed as a record in a database</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">these
records jointly form a relation (table). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Astrolabe
views all the collected data as tables. </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Aggregated
information is obtained by programmable aggregation functions, which
are very similar to functions available in the relational database
language SQL. </FONT></FONT>
</P>
<P><FONT FACE="Arial"><FONT SIZE=4>e.g., assuming that the host
information from above is maintained in a local table called
<I>hostinfo</I>, we could collect the average number of processes for
the zone containing machines A, B, and C, through the simple SQL
query:</FONT></FONT></P>
<P><FONT FACE="Courier New"><FONT SIZE=4><B>SELECT AVG(procs) AS
avg_procs FROM hostinfo</B></FONT></FONT></P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Queries
are continuously evaluated by each agent running on each host. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">An
agent running on a host is responsible for computing parts of the
tables of its associated zones. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">Records
for which it holds no computational responsibility are occasionally
sent to it through a simple, yet effective exchange procedure known
as gossiping.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">An
agent will pass computed results to other agents as well.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Symbol">&middot; </FONT><FONT FACE="Arial">All
agents that needed to assist in obtaining some aggregated information
will see the same result (provided that no changes occur in the
meantime).</FONT></FONT></P>
<P>&nbsp;</P>
<H3><FONT FACE="Arial"><FONT COLOR="#808000">Example:</FONT>
Differentiating Replication Strategies in Globule</FONT></H3>
<P> <FONT SIZE=4><FONT FACE="Arial">Globule relies on end-user
servers being placed in the Internet, and that these servers
collaborate to optimize performance through replication of Web pages.
</FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Each
origin server (i.e., the server responsible for handling updates of a
specific Web site), keeps track of access patterns on a per-page
basis. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Access
patterns are expressed as read and write operations for a page, each
operation being timestamped and logged by the origin server for that
page.</FONT></FONT></P>
<P><BR><BR>
</P>
<P> <FONT SIZE=4><FONT FACE="Arial">Globule assumes that the Internet
can be viewed as an edge-server system. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">It
assumes that requests can always be passed through an appropriate
edge server. T</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Model
allows an origin server to see what would have happened if it had
placed a replica on a specific edge server.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">The
edge-server model assumed by Globule.</FONT></FONT></P>
<P><!--[if gte vml 1]><v:shape id="_x0000_i1042" type="#_x0000_t75"
 style='width:512.25pt;height:220.5pt'>
 <v:imagedata src="./Chapter2a_files/image033.jpg" o:title="fg2-18"/>
</v:shape><![endif]--><IMG SRC="Chapter2a_files/image034.jpg" NAME="graphics18" ALIGN=BOTTOM WIDTH=683 HEIGHT=294 BORDER=0></P>
<P>&nbsp;</P>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Arial">When an origin server
receives a request for a page:</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">it
records the IP address from where the request originated</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">looks
up the ISP or enterprise network associated with that request using
the WHOIS Internet service (<A HREF="../../Papers/rfc1835.txt">Deutsch
et al., 1995</A>). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">It
then looks for the nearest existing replica server that could act as
edge server for that client and computes the latency to that server
along with the maximal bandwidth. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Globule
			assumes that the latency between the replica server and the
			requesting user machine is negligible, and likewise that bandwidth
			between the two is plentiful.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Once
enough requests for a page have been collected, the origin server
performs a simple &quot;what-if analysis.&quot;</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT></FONT>&nbsp;<FONT SIZE=4><FONT FACE="Arial">evaluates
			several replication policies, where a policy describes where a
			specific page is replicated to, and how that page is kept
			consistent. </FONT></FONT>
			</P>
			<DL>
				<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">Each
				replication policy incurs a cost that can be expressed as a
				simple linear function:</FONT></FONT></P>
				<DL>
					<DD><P><FONT FACE="Courier New"><FONT SIZE=4><B>cost=(w1 x
					m1)+(w2 x m2)+ . . .+(wn x mn)</B></FONT></FONT></P>
				</DL>
			</DL>
		</DL>
	</DL>
</DL>
<P><FONT FACE="Arial"><FONT SIZE=4>where mk denotes a performance
metric and wk is the weight indicating how important that metric is. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DL>
				<DL>
					<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Typical
					performance metrics are the aggregated delays between a client
					and a replica server when returning copies of Web pages, the
					total consumed bandwidth between the origin server and a replica
					server for keeping a replica consistent, and the number of stale
					copies that are (allowed to be) returned to a client (<A HREF="../../Papers/pierre01dynamically.pdf">Pierre
					et al., 2002</A>).</FONT></FONT></P>
				</DL>
			</DL>
		</DL>
	</DL>
</DL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">An
origin server regularly evaluates a few tens of replication polices
using a trace-driven simulation, for each Web page separately. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
			best policy is selected and subsequently enforced. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<H3>&nbsp;<FONT FACE="Arial"><FONT COLOR="#808000">Example:</FONT>
Automatic Component Repair Management in Jade</FONT></H3>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Jade
system detects component failures in clusters of computers built
using a component-based approach. (<A HREF="../../Papers/bouchenak_SRDS-2005.pdf">Bouchenak
et al., 2005</A>) </FONT></FONT>
</P>
<P>&nbsp;</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">Jade
is built on the <A HREF="http://fractal.objectweb.org/doc/index.html">Fractal
component model</A>, a Java implementation of a framework that allows
components to be added and removed at runtime (<A HREF="../../Papers/bruneton_CBSE04.pdf">Bruneton
et al., 2004</A>). </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">A
component in Fractal can have two types of interfaces:</FONT></FONT></P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">o </FONT><FONT FACE="Arial">A
			server interface is used to call methods that are implemented by
			that component. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
			client interface is used by a component to call other components. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Components
are connected to each other by binding interfaces. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">e.g,
			a client interface of component C1 can be bound to the server
			interface of component C2. </FONT></FONT>
			</P>
			<DD><P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
			primitive binding means that a call to a client interface directly
			leads to calling the bounded server interface. </FONT></FONT>
			</P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Jade
uses the notion of a repair management domain. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
domain consists of a number of nodes, where each node represents a
server along with the components that are executed by that server.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">A
separate node manager is responsible for adding and removing nodes
from the domain. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">The
			node manager may be replicated for assuring high availability.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Each
node is equipped with failure detectors, which monitor the health of
a node or one of its components and report any failures to the node
manager. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">These
			detectors consider exceptional changes in the state of component,
			the usage of resources, and the actual failure of a component.
			Note that the latter may actually mean that a machine has crashed.</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">When
a failure has been detected, a repair procedure is started.</FONT></FONT></P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">The
procedure is driven by a repair policy, partly executed by the node
manager. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Policies
are stated explicitly and are carried out depending on the detected
failure. </FONT></FONT>
</P>
<DL>
	<DL>
		<DL>
			<DD><P><FONT SIZE=4><FONT FACE="Wingdings">&sect; </FONT><FONT FACE="Arial">e.g,
			suppose a node failure has been detected -&nbsp; the repair policy
			may prescribe that the following steps are to be carried out:</FONT></FONT></P>
		</DL>
	</DL>
</DL>
<OL>
	<LI><P><FONT SIZE=4><FONT FACE="Arial">Terminate every binding
	between a component on a nonfaulty node, and a component on the node
	that just failed.</FONT></FONT></P>
	<LI><P><FONT FACE="Arial"><FONT SIZE=4>Request the node manager to
	start and add a new node to the domain. </FONT></FONT>
	</P>
	<LI><P><FONT FACE="Arial"><FONT SIZE=4>Configure the new node with
	exactly the same components as those on the crashed node. </FONT></FONT>
	</P>
	<LI><P><FONT FACE="Arial"><FONT SIZE=4>Re-establish all the bindings
	that were previously terminated.</FONT></FONT></P>
</OL>
<P>&nbsp;<FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Jade
is an example of self-management: upon the detection of a failure, a
repair policy is automatically executed to bring the system as a
whole into a state in which it was before the crash. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">Being
a component-based system, this automatic repair requires specific
support to allow components to be added and removed at runtime. </FONT></FONT>
</P>
<P><FONT SIZE=4><FONT FACE="Courier New">O </FONT><FONT FACE="Arial">In
general, turning legacy applications into self-managing systems is
not possible.</FONT></FONT></P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>